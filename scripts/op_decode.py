import struct
f=open('/home/charlie/Telemetry/decoded.txt','w')


x=b'DVC\x00\x00\x0eApollo Sprayer\x0c6.05.02\x00\x00\x00\x00\x00\x9e\xdc\xed\x1c8\x80\x0c\xa0\x06908446u\xb4\xe4/>\x14XenP\x00\x00\x00\xffDET\x01\x00\x01\x13Apollo Sprayer Root\x00\x00\x00\x00\x06\x006\x00\x19\x007\x009\x00:\x00;\x00DET\x02\x00\x02\x06Boom 0\x01\x00\x01\x00\n\x00\'\x00(\x00)\x00*\x00+\x00,\x00.\x00/\x000\x001\x00DET\x03\x00\x04\tSection 0\x02\x00\x02\x00\x02\x00\x04\x00\x06\x00DPT\x04\x00\x87\x00`\xf0\xff\xff\x01Y\x05\x00DVP\x05\x00\x00\x00\x00\x00o\x12\x83:\x03\x01mDPT\x06\x00C\x00\xd0\x07\x00\x00\x14Actual Working Width\x05\x00DET\x07\x00\x04\tSection 1\x03\x00\x02\x00\x02\x00\x08\x00\t\x00DPT\x08\x00\x87\x000\xf8\xff\xff\x01Y\x05\x00DPT\t\x00C\x00\xd0\x07\x00\x00\x14Actual Working Width\x05\x00DET\n\x00\x04\tSection 2\x04\x00\x02\x00\x02\x00\x0b\x00\x0c\x00DPT\x0b\x00\x87\x00\x00\x00\x00\x00\x01Y\x05\x00DPT\x0c\x00C\x00\xd0\x07\x00\x00\x14Actual Working Width\x05\x00DET\r\x00\x04\tSection 3\x05\x00\x02\x00\x02\x00\x0e\x00\x0f\x00DPT\x0e\x00\x87\x00\xd0\x07\x00\x00\x01Y\x05\x00DPT\x0f\x00C\x00\xd0\x07\x00\x00\x14Actual Working Width\x05\x00DET\x10\x00\x04\tSection 4\x06\x00\x02\x00\x02\x00\x11\x00\x12\x00DPT\x11\x00\x87\x00\xa0\x0f\x00\x00\x01Y\x05\x00DPT\x12\x00C\x00\xd0\x07\x00\x00\x14Actual Working Width\x05\x00DET\x13\x00\x03\x06Tank 0\x07\x00\x02\x00\x0e\x00\x14\x00\x16\x00\x17\x00\x19\x00\x1a\x00\x1c\x00\x1d\x00\x1f\x00 \x00"\x00#\x00$\x00%\x00&\x00DPD\x14\x00\x02\x00\x01\t\x0bActual rate\x15\x00DVP\x15\x00\x00\x00\x00\x00\x17\xb7\xd18\x00\x04L/haDPD\x16\x00\x01\x00\x02\t\x0bTarget rate\x15\x00DPD\x17\x00\xc2\x00\x01\t\x17Actual Product Pressure\x18\x00DVP\x18\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00DPD\x19\x00\x8d\x00\x01\t\x11Actual Work State\x18\x00DPD\x1a\x00H\x00\x00\t\x14Bin Remaining Actual\x1b\x00DVP\x1b\x00\x00\x00\x00\x00o\x12\x83:\x00\x01LDPD\x1c\x00G\x00\x02\t\x16Bin Remaining Setpoint\x1b\x00DPD\x1d\x00E\x01\x00\x1f\x1fLifetime Application Total Vol.\x1e\x00DVP\x1e\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x01LDPD\x1f\x00P\x00\x02\x1f\x18Application Total Volume\x1e\x00DPD \x00\x0f\x01\x00\x1f\x13Lifetime Total Area!\x00DVP!\x00\x00\x00\x00\x00\x17\xb7\xd18\x00\x02haDPD"\x00t\x00\x02\x1f\nTotal area!\x00DPD#\x00\x9e\x00\x03\x08\x1aPrescription Control State\x18\x00DPT$\x00\xb2\x00\x00\x00\x00\x00\x15Element Type Instance\x18\x00DPD%\x00\x89\x00\x01\t\x08Capacity\x1b\x00DPD&\x00\xb3\x00\x00\x08\x18Actual Cultural Practice\x18\x00DPD\'\x00C\x00\x00\x0f\x14Actual Working Width\x05\x00DPT(\x00F\x00\x10\'\x00\x00\x15Maximum Working Width\x05\x00DPT)\x00\x86\x00\x00\x00\x00\x00\x01X\x05\x00DPT*\x00\x87\x00\x00\x00\x00\x00\x01Y\x05\x00DPD+\x00\xa0\x00\x02\x08\x15Section Control State\x18\x00DPD,\x00\xcd\x00\x03\x08\x0fSC Turn On Time-\x00DVP-\x00\x00\x00\x00\x00o\x12\x83:\x00\x01sDPD.\x00\xce\x00\x03\x08\x10SC Turn Off Time-\x00DPT/\x00\xb2\x00\x00\x00\x00\x00\x15Element Type Instance\x18\x00DPD0\x00"\x01\x02\t\x15Condensed Setpoints 1\x18\x00DPD1\x00\xa1\x00\x01\t\x13Condensed Actuals 1\x18\x00DET2\x00\x06\tConnector\x08\x00\x01\x00\x03\x003\x004\x005\x00DPT3\x00\x86\x00\x00\x00\x00\x00\x01X\x05\x00DPT4\x00\x87\x00\x00\x00\x00\x00\x01Y\x05\x00DPT5\x00\x9d\x00\x05\x00\x00\x00\x0eConnector Type\x18\x00DPD6\x00\xff\xdf\x02\x1f\x1dRequest Default Data Triggers\x18\x00DPD7\x00\x12\x01\x00\x1f\x17Lifetime Effective Time8\x00DVP8\x00\x00\x00\x00\x00\xb4\xa2\x919\x00\x01hDPD9\x00\x13\x01\x00\x1f\x18Lifetime Inffective Time8\x00DPD:\x00w\x00\x02\x1f\x14Effective Total Time8\x00DPD;\x00x\x00\x02\x1f\x16Ineffective Total Time8\x00\xff\xff\xff'
y=b''

li=list()
data=[]
for i in range(len(x)):
    if  x[i:i+3]==b'DVC':
        y=y+b'\n'+x[i:i+1]
        li.append(i)
    elif x[i:i+3]==b'DET':
        y=y+b'\n'+x[i:i+1]
        li.append(i)
    elif x[i:i+3]==b'DPD':
        y=y+b'\n'+x[i:i+1]
        li.append(i)
    elif x[i:i+3]==b'DVP':
        y=y+b'\n'+x[i:i+1]
        li.append(i)
    elif x[i:i+3]==b'DPT':
        y=y+b'\n'+x[i:i+1]
        li.append(i)
    else:
        y=y+x[i:i+1]

li.append(len(x))


for i in range(len(li)-1):
    data.append(x[li[i]:li[i+1]])
DVCs=[]
DPTs=[]
DPDs=[]
DVPs=[]
for i in range(len(data)):
    #look at page ~54 of section 10
    if data[i][0:3]==b'DVC':
        ob_id,len1=struct.unpack('<HB',data[i][3:6])
        txt_name=data[i][6:6+len1].decode('utf-8')
        len2=struct.unpack('<B',data[i][6+len1:7+len1])
        software=data[i][7+len1:7+len1+len2[0]].decode('utf-8')
        name,len3=struct.unpack('<QB',data[i][7+len1+len2[0]:16+len1+len2[0]])
        serial_num=data[i][16+len1+len2[0]:16+len1+len2[0]+len3].decode('utf-8')
        DVCs.append([ob_id,txt_name,software,name,serial_num])
    	
    elif data[i][0:3]==b'DPT':
        ob_id,DDI,value=struct.unpack('<HHl',data[i][3:11])
        DPTs.append([ob_id,DDI,value])

        
    elif data[i][0:3]==b'DPD':
        ob_id,DDI,dset,trigger=struct.unpack('<HHBB',data[i][3:9])
        DPDs.append([ob_id,DDI,dset,trigger])

    elif data[i][0:3]==b'DVP':
        ob_id,offset,scale,num_dec=struct.unpack('<HlfB',data[i][3:14])
        unit=data[i][15:].decode('utf-8')
        DVPs.append([ob_id,offset,scale,num_dec,unit])

        print(data[i])
print(DPTs)
print(DPDs)
print(DVPs)
print(DVCs)

